{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-22T08:25:34.750Z",
    "end": "2024-03-22T08:25:35.568Z",
    "duration": 818,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "25c1c51a-d738-45d0-9d31-0fe70bbdcff7",
      "title": "",
      "fullFile": "cypress\\test_scripts\\TC004_PUT_request.js",
      "file": "cypress\\test_scripts\\TC004_PUT_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "59fdb033-0f60-4996-a5b0-06d73b78fdba",
          "title": "Test PUT method request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send a request PUT method and verify it",
              "fullTitle": "Test PUT method request should be able to send a request PUT method and verify it",
              "timedOut": null,
              "duration": 799,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let requestBody = {\n  id: 1,\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\ncy.request({\n  method: 'PUT',\n  url: 'https://jsonplaceholder.typicode.com/posts/1',\n  header: {\n    'Content-type': 'application/json; charset=UTF-8'\n  },\n  body: requestBody\n}).then(res => {\n  cy.log(JSON.stringify(res));\n  let {\n    status\n  } = res;\n  let resBody = res.body;\n  let {\n    userId,\n    id,\n    title,\n    body\n  } = resBody;\n  expect(status).to.eq(200, 'Verifing response header');\n  expect(userId).to.eq(requestBody.userId, 'Verifing userId');\n  expect(id).to.eq(requestBody.id, 'Verifing id');\n  expect(title).to.eq(requestBody.title, 'Verifing title');\n  expect(body).to.eq(requestBody.body, 'Verifing body');\n});",
              "err": {},
              "uuid": "689ddaab-357e-4682-891b-3f4322355fbd",
              "parentUUID": "59fdb033-0f60-4996-a5b0-06d73b78fdba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "689ddaab-357e-4682-891b-3f4322355fbd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 799,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "result",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}